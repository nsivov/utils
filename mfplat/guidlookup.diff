diff --git a/dlls/mfplat/tests/mfplat.c b/dlls/mfplat/tests/mfplat.c
index 6c6bfc16b6..47d0a89f50 100644
--- a/dlls/mfplat/tests/mfplat.c
+++ b/dlls/mfplat/tests/mfplat.c
@@ -2755,12 +2755,305 @@ static void test_wrapped_media_type(void)
     IMFMediaType_Release(mediatype2);
 }
 
+#include <stdio.h>
+struct guid_def
+{
+    const GUID *guid;
+    const char *name;
+};
+
+static int guid_def_compare(const void *a, const void* b)
+{
+     const struct guid_def *guid1 = a, *guid2 = b;
+     return memcmp(guid1->guid, guid2->guid, sizeof(*guid1->guid));
+}
+
+static void test_guid_lookup(void)
+{
+    unsigned int i;
+#define X(g) { &(g), #g }
+    struct guid_def guid_defs2[] =
+    {
+        X(MFVideoFormat_RGB8),
+        X(MFVideoFormat_RGB555),
+        X(MFVideoFormat_RGB565),
+        X(MFVideoFormat_RGB24),
+        X(MFVideoFormat_RGB32),
+        X(MFVideoFormat_ARGB32),
+        X(MFVideoFormat_A2R10G10B10),
+        X(MFVideoFormat_A16B16G16R16F),
+        X(MFVideoFormat_L8),
+        X(MFVideoFormat_L16),
+        X(MFVideoFormat_D16),
+
+        X(MFVideoFormat_420O),
+        X(MFVideoFormat_DVSL),
+        X(MFVideoFormat_DVSD),
+        X(MFVideoFormat_DVHD),
+        X(MFVideoFormat_DV25),
+        X(MFVideoFormat_DV50),
+        X(MFVideoFormat_DVH1),
+        X(MFVideoFormat_DVC),
+        X(MFVideoFormat_v210),
+        X(MFVideoFormat_v216),
+        X(MFVideoFormat_v410),
+        X(MFVideoFormat_AI44),
+        X(MFVideoFormat_AV1),
+        X(MFVideoFormat_AYUV),
+        X(MFVideoFormat_H263),
+        X(MFVideoFormat_H264),
+        X(MFVideoFormat_H265),
+        X(MFVideoFormat_HEVC),
+        X(MFVideoFormat_HEVC_ES),
+        X(MFVideoFormat_I420),
+        X(MFVideoFormat_IYUV),
+        X(MFVideoFormat_M4S2),
+        X(MFVideoFormat_MJPG),
+        X(MFVideoFormat_MP43),
+        X(MFVideoFormat_MP4S),
+        X(MFVideoFormat_MP4V),
+        X(MFVideoFormat_MPG1),
+        X(MFVideoFormat_MSS1),
+        X(MFVideoFormat_MSS2),
+        X(MFVideoFormat_NV11),
+        X(MFVideoFormat_NV12),
+        X(MFVideoFormat_ORAW),
+        X(MFVideoFormat_P010),
+        X(MFVideoFormat_P016),
+        X(MFVideoFormat_P210),
+        X(MFVideoFormat_P216),
+        X(MFVideoFormat_UYVY),
+        X(MFVideoFormat_VP10),
+        X(MFVideoFormat_VP80),
+        X(MFVideoFormat_VP90),
+        X(MFVideoFormat_Y210),
+        X(MFVideoFormat_Y216),
+        X(MFVideoFormat_Y410),
+        X(MFVideoFormat_Y416),
+        X(MFVideoFormat_Y41P),
+        X(MFVideoFormat_Y41T),
+        X(MFVideoFormat_Y42T),
+        X(MFVideoFormat_YUY2),
+        X(MFVideoFormat_YV12),
+        X(MFVideoFormat_YVYU),
+        X(MFVideoFormat_YVU9),
+        X(MFVideoFormat_WMV1),
+        X(MFVideoFormat_WMV2),
+        X(MFVideoFormat_WMV3),
+        X(MFVideoFormat_WVC1),
+        X(MFVideoFormat_Base_HDCP),
+        X(MFVideoFormat_H264_ES),
+        X(MFVideoFormat_H264_HDCP),
+        X(MFVideoFormat_HEVC_HDCP),
+        X(MFVideoFormat_MPEG2),
+
+        X(MFAudioFormat_AAC),
+        X(MFAudioFormat_ADTS),
+        X(MFAudioFormat_ALAC),
+        X(MFAudioFormat_AMR_NB),
+        X(MFAudioFormat_AMR_WB),
+        X(MFAudioFormat_AMR_WP),
+        X(MFAudioFormat_Dolby_AC3_SPDIF),
+        X(MFAudioFormat_DRM),
+        X(MFAudioFormat_DTS),
+        X(MFAudioFormat_Float),
+        X(MFAudioFormat_FLAC),
+        X(MFAudioFormat_MP3),
+        X(MFAudioFormat_MPEG),
+        X(MFAudioFormat_MSP1),
+        X(MFAudioFormat_Opus),
+        X(MFAudioFormat_PCM),
+        X(MFAudioFormat_WMAudioV8),
+        X(MFAudioFormat_WMAudioV9),
+        X(MFAudioFormat_WMAudio_Lossless),
+        X(MFAudioFormat_WMASPDIF),
+        X(MFAudioFormat_AAC_HDCP),
+        X(MFAudioFormat_ADTS_HDCP),
+        X(MFAudioFormat_Base_HDCP),
+        X(MFAudioFormat_Dolby_AC3),
+        X(MFAudioFormat_Dolby_AC3_HDCP),
+        X(MFAudioFormat_Dolby_DDPlus),
+        X(MFAudioFormat_Float_SpatialObjects),
+        X(MFAudioFormat_LPCM),
+        X(MFAudioFormat_PCM_HDCP),
+        X(MFAudioFormat_Vorbis),
+
+        X(MFMediaType_Audio),
+        X(MFMediaType_Binary),
+        X(MFMediaType_Default),
+        X(MFMediaType_FileTransfer),
+        X(MFMediaType_HTML),
+        X(MFMediaType_Image),
+        X(MFMediaType_MultiplexedFrames),
+        X(MFMediaType_Perception),
+        X(MFMediaType_Protected),
+        X(MFMediaType_SAMI),
+        X(MFMediaType_Script),
+        X(MFMediaType_Stream),
+        X(MFMediaType_Subtitle),
+        X(MFMediaType_Video),
+    };
+    struct guid_def guid_defs[] =
+    {
+        X(MF_MT_FRAME_RATE),
+        X(MF_MT_AVG_BITRATE),
+        X(MF_MT_FRAME_SIZE),
+        X(MF_MT_INTERLACE_MODE),
+        X(MF_MT_FRAME_RATE_RANGE_MAX),
+        X(MF_MT_MAJOR_TYPE),
+        X(MF_MT_PIXEL_ASPECT_RATIO),
+        X(MF_MT_SUBTYPE),
+        X(MF_MT_ALL_SAMPLES_INDEPENDENT),
+        X(MF_MT_USER_DATA),
+        X(MF_MT_FRAME_RATE_RANGE_MIN),
+        X(MF_MT_WRAPPED_TYPE),
+        X(MF_MT_FIXED_SIZE_SAMPLES),
+        X(MF_MT_COMPRESSED),
+        X(MF_MT_SAMPLE_SIZE),
+        X(MF_MT_VIDEO_3D),
+        X(MF_MT_VIDEO_3D_FORMAT),
+        X(MF_MT_VIDEO_3D_NUM_VIEWS),
+        X(MF_MT_VIDEO_3D_LEFT_IS_BASE),
+        X(MF_MT_VIDEO_3D_FIRST_IS_LEFT),
+        X(MF_MT_VIDEO_ROTATION),
+        X(MF_MT_VIDEO_RENDERER_EXTENSION_PROFILE),
+        X(MF_MT_VIDEO_NO_FRAME_ORDERING),
+        X(MF_MT_VIDEO_H264_NO_FMOASO),
+        X(MF_MT_SECURE),
+        X(MF_MT_ALPHA_MODE),
+        X(MF_MT_DEPTH_MEASUREMENT),
+        X(MF_MT_DEPTH_VALUE_UNIT),
+        X(MF_MT_FORWARD_CUSTOM_NALU),
+        X(MF_MT_FORWARD_CUSTOM_SEI),
+        X(MF_MT_AUDIO_NUM_CHANNELS),
+        X(MF_MT_AUDIO_SAMPLES_PER_SECOND),
+        X(MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND),
+        X(MF_MT_AUDIO_AVG_BYTES_PER_SECOND),
+        X(MF_MT_AUDIO_BLOCK_ALIGNMENT),
+        X(MF_MT_AUDIO_BITS_PER_SAMPLE),
+        X(MF_MT_AUDIO_VALID_BITS_PER_SAMPLE),
+        X(MF_MT_AUDIO_SAMPLES_PER_BLOCK),
+        X(MF_MT_AUDIO_CHANNEL_MASK),
+        X(MF_MT_AUDIO_FOLDDOWN_MATRIX),
+        X(MF_MT_AUDIO_WMADRC_PEAKREF),
+        X(MF_MT_AUDIO_WMADRC_PEAKTARGET),
+        X(MF_MT_AUDIO_WMADRC_AVGREF),
+        X(MF_MT_AUDIO_WMADRC_AVGTARGET),
+        X(MF_MT_AUDIO_PREFER_WAVEFORMATEX),
+        X(MF_MT_AUDIO_FLAC_MAX_BLOCK_SIZE),
+        X(MF_MT_AAC_PAYLOAD_TIME),
+        X(MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION),
+
+        X(MF_BYTESTREAM_ORIGIN_NAME),
+        X(MF_BYTESTREAM_CONTENT_TYPE),
+        X(MF_BYTESTREAM_DURATION),
+        X(MF_BYTESTREAM_LAST_MODIFIED_TIME),
+        X(MF_BYTESTREAM_IFO_FILE_URI),
+        X(MF_BYTESTREAM_DLNA_PROFILE_ID),
+
+        X(MF_SINK_WRITER_ASYNC_CALLBACK),
+        X(MF_SINK_WRITER_DISABLE_THROTTLING),
+        X(MF_SINK_WRITER_D3D_MANAGER),
+        X(MF_SINK_WRITER_ENCODER_CONFIG),
+
+        X(MF_READWRITE_DISABLE_CONVERTERS),
+        X(MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS),
+        X(MF_READWRITE_MMCSS_CLASS),
+        X(MF_READWRITE_MMCSS_PRIORITY),
+        X(MF_READWRITE_MMCSS_CLASS_AUDIO),
+        X(MF_READWRITE_MMCSS_PRIORITY_AUDIO),
+        X(MF_READWRITE_D3D_OPTIONAL),
+
+        X(MF_SD_LANGUAGE),
+        X(MF_SD_MUTUALLY_EXCLUSIVE),
+        X(MF_SD_PROTECTED),
+        X(MF_SD_STREAM_NAME),
+        X(MF_SD_SAMI_LANGUAGE),
+
+        X(MF_PD_PMPHOST_CONTEXT),
+        X(MF_PD_APP_CONTEXT),
+        X(MF_PD_TOTAL_FILE_SIZE),
+        X(MF_PD_AUDIO_ENCODING_BITRATE),
+        X(MF_PD_VIDEO_ENCODING_BITRATE),
+        X(MF_PD_MIME_TYPE),
+        X(MF_PD_LAST_MODIFIED_TIME),
+        X(MF_PD_PLAYBACK_ELEMENT_ID),
+        X(MF_PD_PREFERRED_LANGUAGE),
+        X(MF_PD_PLAYBACK_BOUNDARY_TIME),
+        X(MF_PD_AUDIO_ISVARIABLEBITRATE),
+        X(MF_PD_ADAPTIVE_STREAMING),
+        X(MF_PD_SAMI_STYLELIST),
+
+        X(MFSampleExtension_DecodeTimestamp),
+        X(MFSampleExtension_Timestamp),
+        X(MFSampleExtension_Token),
+        X(MFSampleExtension_3DVideo),
+        X(MFSampleExtension_3DVideo_SampleFormat),
+        X(MFSampleExtension_TargetGlobalLuminance),
+        X(MFSampleExtension_ForwardedDecodeUnits),
+        X(MFSampleExtension_ForwardedDecodeUnitType),
+
+        X(MF_SOURCE_READER_ASYNC_CALLBACK),
+        X(MF_SOURCE_READER_D3D_MANAGER),
+        X(MF_SOURCE_READER_D3D11_BIND_FLAGS),
+        X(MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS),
+        X(MF_SOURCE_READER_DISABLE_DXVA),
+        X(MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN),
+        X(MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING),
+        X(MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS),
+        X(MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING),
+        X(MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS),
+        X(MF_SOURCE_READER_MEDIASOURCE_CONFIG),
+
+        X(MF_EVENT_DO_THINNING),
+        X(MF_EVENT_MFT_CONTEXT),
+        X(MF_EVENT_MFT_INPUT_STREAM_ID),
+        X(MF_EVENT_PRESENTATION_TIME_OFFSET),
+        X(MF_EVENT_SCRUBSAMPLE_TIME),
+        X(MF_EVENT_SESSIONCAPS),
+        X(MF_EVENT_SESSIONCAPS_DELTA),
+        X(MF_EVENT_SOURCE_ACTUAL_START),
+        X(MF_EVENT_SOURCE_CHARACTERISTICS),
+        X(MF_EVENT_SOURCE_CHARACTERISTICS_OLD),
+        X(MF_EVENT_SOURCE_FAKE_START),
+        X(MF_EVENT_SOURCE_PROJECTSTART),
+        X(MF_EVENT_SOURCE_TOPOLOGY_CANCELED),
+        X(MF_EVENT_START_PRESENTATION_TIME),
+        X(MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT),
+        X(MF_EVENT_STREAM_METADATA_CONTENT_KEYIDS),
+        X(MF_EVENT_STREAM_METADATA_KEYDATA),
+        X(MF_EVENT_STREAM_METADATA_SYSTEMID),
+        X(MF_EVENT_TOPOLOGY_STATUS),
+        X(MF_EVENT_OUTPUT_NODE),
+    };
+#undef X
+
+    qsort(guid_defs, ARRAY_SIZE(guid_defs), sizeof(struct guid_def), guid_def_compare);
+
+    printf("#define X(g) { &(g), #g }\n");
+    for (i = 0; i < ARRAY_SIZE(guid_defs); ++i)
+    {
+        printf("        X(%s),\n", guid_defs[i].name);
+    }
+    printf("#undef X\n");
+
+    qsort(guid_defs2, ARRAY_SIZE(guid_defs2), sizeof(struct guid_def), guid_def_compare);
+
+    printf("#define X(g) { &(g), #g }\n");
+    for (i = 0; i < ARRAY_SIZE(guid_defs2); ++i)
+    {
+        printf("        X(%s),\n", guid_defs2[i].name);
+    }
+    printf("#undef X\n");
+}
+
 START_TEST(mfplat)
 {
     CoInitialize(NULL);
 
     init_functions();
 
+    test_guid_lookup();
     test_startup();
     test_register();
     test_media_type();
