diff --git a/dlls/mfplat/tests/mfplat.c b/dlls/mfplat/tests/mfplat.c
index b66c54a374..3187ed5c04 100644
--- a/dlls/mfplat/tests/mfplat.c
+++ b/dlls/mfplat/tests/mfplat.c
@@ -2344,12 +2344,133 @@ static void test_MFInvokeCallback(void)
     ok(hr == S_OK, "Failed to shut down, hr %#x.\n", hr);
 }
 
+#include <stdio.h>
+struct guid_def
+{
+    const GUID *guid;
+    const char *name;
+};
+
+static int guid_def_compare(const void *a, const void* b)
+{
+     const struct guid_def *guid1 = a, *guid2 = b;
+     return memcmp(guid1->guid, guid2->guid, sizeof(*guid1->guid));
+}
+
+static void test_guid_lookup(void)
+{
+    unsigned int i;
+    struct guid_def guid_defs[] =
+    {
+#define X(g) { &(g), #g }
+        X(MF_MT_FRAME_RATE),
+        X(MF_MT_AVG_BITRATE),
+        X(MF_MT_FRAME_SIZE),
+        X(MF_MT_INTERLACE_MODE),
+        X(MF_MT_FRAME_RATE_RANGE_MAX),
+        X(MF_MT_MAJOR_TYPE),
+        X(MF_MT_PIXEL_ASPECT_RATIO),
+        X(MF_MT_SUBTYPE),
+        X(MF_MT_ALL_SAMPLES_INDEPENDENT),
+        X(MF_MT_USER_DATA),
+        X(MF_MT_FRAME_RATE_RANGE_MIN),
+
+        X(MF_BYTESTREAM_ORIGIN_NAME),
+        X(MF_BYTESTREAM_CONTENT_TYPE),
+        X(MF_BYTESTREAM_DURATION),
+        X(MF_BYTESTREAM_LAST_MODIFIED_TIME),
+        X(MF_BYTESTREAM_IFO_FILE_URI),
+        X(MF_BYTESTREAM_DLNA_PROFILE_ID),
+
+        X(MF_SINK_WRITER_ASYNC_CALLBACK),
+        X(MF_SINK_WRITER_DISABLE_THROTTLING),
+        X(MF_SINK_WRITER_D3D_MANAGER),
+        X(MF_SINK_WRITER_ENCODER_CONFIG),
+
+        X(MF_READWRITE_DISABLE_CONVERTERS),
+        X(MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS),
+        X(MF_READWRITE_MMCSS_CLASS),
+        X(MF_READWRITE_MMCSS_PRIORITY),
+        X(MF_READWRITE_MMCSS_CLASS_AUDIO),
+        X(MF_READWRITE_MMCSS_PRIORITY_AUDIO),
+        X(MF_READWRITE_D3D_OPTIONAL),
+
+        X(MF_SD_LANGUAGE),
+        X(MF_SD_MUTUALLY_EXCLUSIVE),
+        X(MF_SD_PROTECTED),
+        X(MF_SD_STREAM_NAME),
+        X(MF_SD_SAMI_LANGUAGE),
+
+        X(MF_PD_PMPHOST_CONTEXT),
+        X(MF_PD_APP_CONTEXT),
+        X(MF_PD_TOTAL_FILE_SIZE),
+        X(MF_PD_AUDIO_ENCODING_BITRATE),
+        X(MF_PD_VIDEO_ENCODING_BITRATE),
+        X(MF_PD_MIME_TYPE),
+        X(MF_PD_LAST_MODIFIED_TIME),
+        X(MF_PD_PLAYBACK_ELEMENT_ID),
+        X(MF_PD_PREFERRED_LANGUAGE),
+        X(MF_PD_PLAYBACK_BOUNDARY_TIME),
+        X(MF_PD_AUDIO_ISVARIABLEBITRATE),
+        X(MF_PD_ADAPTIVE_STREAMING),
+        X(MF_PD_SAMI_STYLELIST),
+
+        X(MFSampleExtension_DecodeTimestamp),
+        X(MFSampleExtension_Timestamp),
+        X(MFSampleExtension_Token),
+
+        X(MF_SOURCE_READER_ASYNC_CALLBACK),
+        X(MF_SOURCE_READER_D3D_MANAGER),
+        X(MF_SOURCE_READER_D3D11_BIND_FLAGS),
+        X(MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS),
+        X(MF_SOURCE_READER_DISABLE_DXVA),
+        X(MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN),
+        X(MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING),
+        X(MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS),
+        X(MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING),
+        X(MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS),
+        X(MF_SOURCE_READER_MEDIASOURCE_CONFIG),
+
+        X(MF_EVENT_DO_THINNING),
+        X(MF_EVENT_MFT_CONTEXT),
+        X(MF_EVENT_MFT_INPUT_STREAM_ID),
+        X(MF_EVENT_PRESENTATION_TIME_OFFSET),
+        X(MF_EVENT_SCRUBSAMPLE_TIME),
+        X(MF_EVENT_SESSIONCAPS),
+        X(MF_EVENT_SESSIONCAPS_DELTA),
+        X(MF_EVENT_SOURCE_ACTUAL_START),
+        X(MF_EVENT_SOURCE_CHARACTERISTICS),
+        X(MF_EVENT_SOURCE_CHARACTERISTICS_OLD),
+        X(MF_EVENT_SOURCE_FAKE_START),
+        X(MF_EVENT_SOURCE_PROJECTSTART),
+        X(MF_EVENT_SOURCE_TOPOLOGY_CANCELED),
+        X(MF_EVENT_START_PRESENTATION_TIME),
+        X(MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT),
+        X(MF_EVENT_STREAM_METADATA_CONTENT_KEYIDS),
+        X(MF_EVENT_STREAM_METADATA_KEYDATA),
+        X(MF_EVENT_STREAM_METADATA_SYSTEMID),
+        X(MF_EVENT_TOPOLOGY_STATUS),
+        X(MF_EVENT_OUTPUT_NODE),
+#undef X
+    };
+
+    qsort(guid_defs, ARRAY_SIZE(guid_defs), sizeof(struct guid_def), guid_def_compare);
+
+    printf("#define X(g) { &(g), #g }\n");
+    for (i = 0; i < ARRAY_SIZE(guid_defs); ++i)
+    {
+        printf("        X(%s),\n", guid_defs[i].name);
+    }
+    printf("#undef X\n");
+}
+
 START_TEST(mfplat)
 {
     CoInitialize(NULL);
 
     init_functions();
 
+    test_guid_lookup();
     test_startup();
     test_register();
     test_media_type();
